public hashtbl hashMenuStr = hash_sort

setup.start()


class setup
	dim fso
	
	procedure setup()
		fso = createoleobj("Scripting.FileSystemObject")
	fend
	
	procedure start()
		helpTimeStamp = getLeastHelpFileStamp()
		
		helpDecompiledFolderPath = "helpDecompile" + helpTimeStamp
		helpDecompile(helpDecompiledFolderPath)
		
	fend
	
	function getLeastHelpFileStamp()
		helpFilePath = GET_UWSC_DIR + "/uwsc.chm"
		helpFile = fso.GetFile(helpFilePath)
		dlm = helpFile.DateLastModified
		
		//扱いやすいようにフォーマット整形
		//2015/01/18 6:30:38 → 2015_01_18_6_30_38
		dlm = replace(dlm, "/", "_")
		dlm = replace(dlm, " ", "_")
		dlm = replace(dlm, ":", "_")
		result = dlm
	fend
	
	procedure helpDecompile(folderPath)
		//デコンパイル済ならhelpDecompile2015_01_18_6_30_38
		//フォルダが存在する
		if fso.FolderExists(folderPath) = true then
			//既に最新ヘルプをデコンパイルしていたら何もしない
			exit
		endif
		
		//過去に作成したフォルダがあるなら削除
		fso.DeleteFolder("helpDecompile*", true)
		
		//カレントフォルダにヘルプをコピーしてデコンパイル、ヘルプ削除
		textblock dosCopyCmd
		copy "GET_UWSC_DIR\uwsc.chm" "GET_CUR_DIR"
		hh.exe -decompile DECOMPILE_FOLDER uwsc.chm
		del uwsc.chm
		endtextblock
		decompileCmd = replace(dosCopyCmd, "GET_UWSC_DIR", GET_UWSC_DIR)
		decompileCmd = replace(decompileCmd, "GET_CUR_DIR", GET_CUR_DIR)
		decompileCmd = replace(decompileCmd, "DECOMPILE_FOLDER", folderPath)
		doscmd(decompileCmd)
		
		helpParse(folderPath)
	fend
	
	procedure helpParse(folderPath)
		//ヘルプの目次テキストを取得（uwsc.hhc）
		hhcID = fopen(folderPath + "/uwsc.hhc")
		hhcText = fget(hhcID, f_alltext)
		fclose(hhcID)
		//msgbox(hhcText)
		
		//htmlとして解析する
		hf = createoleobj("htmlfile")
		hf.Write(hhcText)
		
		//paramタグからスクリプト関数の情報を取得
		//<param name="Name" value="GETID　(ウィンドウ ID の取得)">
		//<param name="Local" value="_RESOURCE/function.htm#getid">
		//<param name="ImageNumber" value="11">
		elements = hf.getElementsByTagName("param")
		getoleitem(elements)
		for i=0 to (length(ALL_OLE_ITEM) - 1)
			element = ALL_OLE_ITEM[i]
			value = element.getAttribute("value")
			if value = "スクリプト関数" then
				scriptFuncStart = i+3 //ここから区分と関数名が記載
			elseif value = "数学関数" then
				scriptFuncEnd = i-1 //ここまで
				break
			endif
		next
		
		//value属性の文字列を配列に格納
		listMaxSize=(scriptFuncEnd-scriptFuncStart+1)/3 - 1
		dim nameValue[listMaxSize]
		dim localValue[listMaxSize]
		dim imageValue[listMaxSize]
		for i=0 to listMaxSize
			nameIndex =  scriptFuncStart + 3*i
			localIndex = scriptFuncStart + 3*i+1
			imageIndex = scriptFuncStart + 3*i+2
			nameValue[i]  = ALL_OLE_ITEM[nameIndex ].getAttribute("value")
			localValue[i] = ALL_OLE_ITEM[localIndex].getAttribute("value")
			imageValue[i] = ALL_OLE_ITEM[imageIndex].getAttribute("value")
		next
		
		functionHTML.open(folderPath + "/_RESOURCE/function.htm")
		
		level1Key = ""
		for i=0 to length(nameValue)-1
			if imageValue[i] = "5" then
				//レベル1メニューに追加
				level1Key = menuInfo.getNewIndex()
				hashMenuStr[level1Key] = nameValue[i]
			else
				//レベル2メニューに追加
				level2Key = level1Key+","+menuInfo.getNewIndex()
				hashMenuStr[level2Key] = nameValue[i]
				
				//レベル3メニューに追加
				anchorName = betweenstr(localValue[i], "#")
				level3Add(level2Key, anchorName)
			endif
		next
		
		functionHTML.close()
		
		//メニューリストを保存
		saveMenuList()
	fend
	
	procedure level3Add(level1Key, anchorName)
		description = functionHTML.get(anchorName)
		splitStr = split(description, "<#CR>")
		for i=0 to length(splitStr)-1
			//キーの指定方法は[レベル1,レベル2]となる
			level2Key = level1Key + "," + menuInfo.getNewIndex()
			hashMenuStr[level2Key] = splitStr[i]
		next
	fend
	
	procedure saveMenuList()
		writeFID = fopen("menuText.tsv", F_WRITE)
		for i=0 to length(hashMenuStr)-1
			//タブ区切りでキーと値を1行ずつ書き込んでいく
			writeStr = hashMenuStr[i, hash_key] + "<#TAB>"+ hashMenuStr[i, hash_val]
			fput(writeFID, writeStr)
		next
		fclose(writeFID)
	fend
	
endclass

class menuInfo
	dim localNumber
	
	procedure menuInfo()
		localNumber=0
	fend
	
	function getNewIndex()
		//レベルに関係なく0から順に番号を割り振る
		result = getIndex(localNumber)
		localNumber = localNumber + 1
	fend
	
	function getIndex(num)
		//Mxxxx
		result = "M" + replace(format(num, 4), " ", "0")
	fend
endclass

class functionHTML
	dim fid
	hashtbl hashFuncRow
	
	procedure open(filePath)
		fid = fopen(filePath)
		rowMax = fget(fid, F_LINECOUNT)
		
		//ハッシュキー FUNC_start 該当関数の説明開始行番号 <a name="FUNC">の次の行
		//ハッシュキー FUNC_end 該当関数の説明終了行番号 <a name="次のFUNC">の前の行
		lastFuncName = ""
		for row=1 to rowMax
			line = fget(fid, row)
			if pos("<a name=", line) > 0 then
				funcName = betweenstr(line, "<a name=<#DBL>", "<#DBL>>")
				hashFuncRow[funcName + "_start"] = row + 1
				hashFuncRow[lastFuncName + "_end"] = row - 1
				lastFuncName = funcName
				print funcName + " " + hashFuncRow[funcName + "_start"]
			endif
		next
	fend
	
	procedure close()
		fclose(fid)
	fend
	
	//関数の説明を取得する
	function get(funcName)
		resultStr = ""
		startRow = hashFuncRow[funcName + "_start"]
		endRow = hashFuncRow[funcName + "_end"]
		
		//該当関数説明の開始・終了行番号が見つからなければ終了
		if (startRow = empty) or (endRow = empty) then
			result=funcName + " not found."
			exit
		endif
		
		for row=startRow to endRow
			line = fget(fid, row)
			resultStr = resultStr + line + "<#CR>"
		next
		
		repeat
			//タグをすべて消す
			tagStr = betweenstr(resultStr, "<", ">")
			resultStr = replace(resultStr, "<" + tagStr + ">", "")
		until tagStr = empty
		
		//HTML文字実体参照を変換する
		resultStr = decode(resultStr, CODE_HTML)
		
		//不要な最後の改行を消す
		resultStr = trim(resultStr)
		
		result = resultStr
	fend
endclass
